scopeName: 'source.nsl-own'
fileTypes: [
  "nsl"
]
name: "nsL Assembler-own"
patterns: [
    {
      include: '#blockBody'
    }
  ]
repository:
  blockBody:
    patterns: [
      {
        include: "#variableAssignment"
      }
      {
        include: "#variable"
      }
      {
        include: '#controlStructure'
      }
      {
        include: "#function"
      }
      {
        include: "#functionCall"
      }
      {
        include: "#page"
      }
      {
        include: "#lineEnd"
      }
      {
        match: "\\s"
        name: 'punctuation.whitespace'
      }
      {
        include: '#comments'
      }
      {
        include: '#block'
      }
      {
        begin: "#nsis"
        beginCaptures:
          '0':
            name: 'keyword.control.nsl'
        end: "#nsisend"
        endCaptures:
          '0':
            name: 'keyword.control.nsl'
      }
      {
        include: '#precompiler'
      }
      {
        include: "#invalid"
      }
    ]
  precompiler:
    patterns: [
      {
        begin: "(\\#)"
        beginCaptures:
          '1':
            name: 'keyword.control.nsl'
        end: "[\\n\\r]{1}"
        patterns: [
          {
            begin: '(define|include)'
            beginCaptures:
              '0':
                name: 'keyword.control.nsl'
            patterns: [
              {
                match: "[\\t\\ ]"
                name: 'punctuation.whitespace'
              }
              {
                include: "#literal"
              }
              {
                include: "#constant"
              }
            ]
          }
          {
            include: "#whitespace"
          }
          {
            include: "#lineEnd"
          }
          {
            include: "#invalid"
          }
        ]
      }
    ]
  block:
    patterns: [
      {
        begin: '\\{'
        beginCaptures:
          '0':
            name: 'punctuation.definition.block.begin.nsl'
        end: '\\}'
        endCaptures:
          '0':
            name: 'punctuation.definition.block.end.nsl'
        patterns: [
          {
            begin: '(return)'
            beginCaptures:
              '1':
                name: 'keyword.control.nsl'
            end: '(;)'
            endCaptures:
              '1':
                name: 'punctuation.terminator.statement.nsl'
            patterns: [
              {
                include: "#literal"
              }
            ]
          }
          {
            include: '#blockBody'
          }
        ]
      }
    ]
  lineEnd:
    patterns: [
      {
        match: ';'
        name: 'punctuation.terminator.statement.nsl'
      }
    ]
  numbers:
    patterns: [
      {
        match: '\\b(?<!\\$|_)((0(x|X)[0-9a-fA-F]+)|(0(b|B)[01]+)|(0(o|O)[0-7]+)|([0-9]+(\\.[0-9]+)?)((e|E)[+-]?[0-9]+)?)\\b'
        name: 'constant.numeric.nsl'
      }
    ]
  constant:
    patterns: [
      {
        match: "([A-Z_]*)"
        name: 'constant.other.nsl'
      }
    ]
  boolean:
    patterns: [
      {
        match: "true"
        name: 'constant.language.boolean.true.nsl'
      }
      {
        match: "false"
        name: 'constant.language.boolean.false.nsl'
      }
    ]
  strings:
    patterns: [
      {
        begin: '\''
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.nsl'
        end: '\''
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.nsl'
        name: 'string.quoted.single.nsl'
        patterns: [
          {
            match: '\\\\.'
            name: 'constant.character.escape.nsl'
          }
          {
            match: '[^\']*[^\\n\\r\'\\\\]$'
            name: 'invalid.illegal.string.nsl'
          }
        ]
      }
      {
        begin: '"'
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.nsl'
        end: '"'
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.nsl'
        name: 'string.quoted.double.nsl'
        patterns: [
          {
            match: '\\\\.'
            name: 'constant.character.escape.nsl'
          }
          {
            match: '[^"]*[^\\n\\r"\\\\]$'
            name: 'invalid.illegal.string.nsl'
          }
        ]
      }
      {
        begin: '@"'
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.nsl'
        end: '"'
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.nsl'
        name: 'string.quoted.double.nsl'
        patterns: [
          {
            match: '[^"]*[^\\n\\r"\\\\]$'
            name: 'invalid.illegal.string.nsl'
          }
        ]
      }
      {
        begin: '(?:\\s*)\\.(?:\\s*)'
        beginCaptures:
          '0':
            name: 'keyword.operator.concatinate.string.nsl'
        end: '([\\s\\.]?)'
        patterns: [
          {
            include: "#variable"
          }
          {
            include: "#strings"
          }
          {
            include: "#numbers"
          }
        ]
      }
    ]
  page:
    patterns: [
      {
        begin: '(page)'
        beginCaptures:
          '0':
            name: 'keyword.control.nsl'
        end: ';'
        endCaptures:
          '0':
            name: 'punctuation.terminator.statement.nsl'
        patterns: [
          {
            include: "#functionCall"
          }
        ]
      }
    ]
  functionCall:
    patterns: [
      {
        begin: "(\\w+(?:[\\:]{2})?(?:\\w)*)(\\()"
        beginCaptures:
          '1':
            name: 'entity.name.function.nsl'
          '2':
            name: 'punctuation.definition.parameters.begin.nsl'
        end: "(\\))"
        endCaptures:
          '1':
            name: 'punctuation.definition.parameters.end.nsl'
        patterns:[
          {
            include: "#literal"
          }
          {
            match: ",(?:\\s*)"
            name: 'meta.object.delimiter.nsl'
          }
          {
            include: "#invalid"
          }
        ]
      }
    ]
  functionParams:
    patterns: [
      {
        match: '\\(|\\)'
        name: 'meta.brace.round.nsl'
      }
      {
        match: ','
        name: 'meta.object.delimiter.nsl'
      }
      {
        match: '='
        name: 'keyword.operator.assignment.nsl'
      }
      {
        include: '#comments'
      }
      {
        include: '#variable'
      }
      {
        match: '\\s'
        name: 'punctuation.whitespace'
      }
      {
        include: '#invalid'
      }
    ]
  function:
    patterns: [
      {
        begin: "(function) ([\\w\\.\\_]{1}[\\w\\.\\_0-9]*)(\\()"
        beginCaptures:
          '1':
            name: 'storage.type.function.nsl'
          '2':
            name: 'entity.name.function.nsl'
          '3':
            name: 'punctuation.definition.parameters.begin.nsl'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'punctuation.definition.parameters.end.nsl'
        patterns: [
          {
            include: '#functionParams'
          }
        ]
      }
    ]
  literal:
    patterns: [
      {
        include: "#variable"
      }
      {
        include: "#numbers"
      }
      {
        include: "#strings"
      }
      {
        include: "#boolean"
      }
    ]
  variable:
    patterns: [
      {
        match: "(\\@?)\\$([\\w]+)"
        name: "variable.name.nsl"
      }
    ]
  variableAssignment:
    patterns: [
      {
        begin: '((?:@)?\\$[\\w]+)[\\s]*(=)[\\s]*'
        beginCaptures:
          '1':
            name: 'variable.name.nsl'
          '2':
            name: 'keyword.operator.assignment.nsl'
        end: '(;)'
        endCaptures:
          '1':
            name: 'punctuation.terminator.statement.nsl'
        patterns: [
          {
            include: "#literal"
          }
          {
            include: "#functionCall"
          }
          {
            include: "#invalid"
          }
        ]
      }
    ]
  controlStructure:
    patterns: [
      {
        include: '#if'
      }
    ]
  if:
    patterns: [
      {
        begin: '(if)(?:[\\w*])(\\()'
        beginCaptures:
          '1':
            name: 'keyword.control.if.nsl'
          '2':
            name: 'punctuation.definition.parameters.begin.nsl'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'punctuation.definition.parameters.end.nsl'
        patterns: [
          {
            include: '#booleanExpression'
          }
        ]
      }
    ]
  booleanExpression:
    patterns: [
      {
        
      }
    ]
  invalid:
    patterns: [
      {
        match: "(.*)"
        name: "invalid.illegal"
      }
    ]
  comments:
    patterns: [
      {
        begin: '/\\*'
        captures:
          '0':
            name: 'punctuation.definition.comment.js'
        end: '\\*/'
        name: 'comment.block.js'
      }
      {
        begin: '(^[ \\t]+)?(?=//)'
        beginCaptures:
          '1':
            'name': 'punctuation.whitespace.comment.leading.js'
        end: '(?!\\G)'
        patterns: [
          {
            begin: '//'
            beginCaptures:
              '0':
                name: 'punctuation.definition.comment.js'
            end: '\\n'
            name: 'comment.line.double-slash.js'
          }
        ]
      }
    ]
